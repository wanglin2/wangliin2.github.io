(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{1710:function(t,s,n){"use strict";n.r(s);var a=n(7),p=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"汉诺塔游戏与递归"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#汉诺塔游戏与递归"}},[t._v("#")]),t._v(" 汉诺塔游戏与递归")]),n("blockquote",[n("p",[t._v("博客："),n("a",{attrs:{href:"http://lxqnsys.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://lxqnsys.com/"),n("OutboundLink")],1),t._v("\n公众号：理想青年实验室")])]),n("p",[t._v("汉诺塔部分核心内容来自《程序员的数学》一书。")]),n("p",[n("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f2f967a53d44418827877f2c2a59ce8~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),n("p",[t._v("图上这个游戏，名叫汉诺塔，不知道大家有没有玩过，传说印度教的创造之神大梵天在创造世界时顺手搞了三根柱子，在一根柱子上从上到下按小到大的顺序摞着一堆圆环，然后命令婆罗门把这些圆片全部移到另一根柱子，但是有一些规则，如下：")]),n("p",[t._v("1.一次只能转移一个圆环到一根柱子上")]),n("p",[t._v("2.圆环上面不能放比它小的圆环")]),n("p",[t._v("戳这个网址试试吧："),n("a",{attrs:{href:"http://www.hannuota.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://www.hannuota.cn/"),n("OutboundLink")],1),t._v("。三层是不是so easy，四层呢？五层呢？是不是就凌乱了，它的最少移动次数又是怎么计算出来的呢？")]),n("p",[t._v("假设第一根柱子是起始柱，第二根为目标柱，第三根为中转柱。")]),n("p",[t._v("让我们从只有一个圆环的情况开始吧。")]),n("p",[t._v("只有一个圆环，那么只要把它移动到目标柱子就可以了，最少移动次数就是1步。")]),n("p",[n("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4d9c233f6a75440cb77adc70dad1d5d2~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),n("p",[t._v("接下来是两个圆环。")]),n("p",[t._v("因为小的圆环上面不能放大的，所以小圆环不能先移到目标柱上，否则大的放不了，那么就先把它移动到中转柱上，一步就搞定了，接下来把大的移到目标柱上，最后把小的移到目标柱上，最少次数为3次。")]),n("p",[n("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9f162a0d1e7548b68a9dba503b336e44~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),n("p",[t._v("接下来是3个圆环。")]),n("p",[t._v("移动方式如下图所示，最少次数为7次。")]),n("p",[n("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8abb39032a6443e5a3b2431306524888~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),n("p",[t._v("4个圆环的步骤图如下：")]),n("p",[n("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/090b5bcb5abc412f8c6949b0c80e99b4~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),n("p",[t._v("因为步骤较多一个图画不完，所以分两个图画，上面这个图的最后状态是上面三个圆环都移到了最右边柱子上，最大的圆环移到了中间目标柱上，所以接下来的步骤如下，总的移动次数为15：")]),n("p",[n("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/21ba4d9154bc4bb3b45291bfe7045058~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),n("p",[t._v("仔细观察上述几个图，首先会发现最大的圆环都只移动了一次，从起始柱移到目标柱，其次是最大的圆环移动之前，剩余的圆环都完整的移动到了中转柱上，最后是最大的圆环移动之后剩余的圆环也都移到了目标柱上，所以除了最大的圆环剩下的圆环都完整的移动了两次，而如果忽略最大的圆环的话，那么其实会发现整个过程中是做两次n-1层汉诺塔，而解n-1层汉诺塔时如果再忽略最大圆环的话，就是做两次n-2层汉诺塔，这样一直下去，直到做一层汉诺塔，其实这就是个递归结构，那么可以归纳n层汉诺塔的解法如下：")]),n("p",[t._v("设x为起点柱，y为目标柱，z为中转柱，n层汉诺塔即利用中转柱z将n个圆环从起点柱x转移至目标柱y。")]),n("p",[t._v("1.n=0时：")]),n("p",[t._v("没有圆环，不做任何动作；")]),n("p",[t._v("2.n>0时：")]),n("p",[t._v("首先，将n-1个圆环从x柱，经由y柱中转，移到z柱（解出n-1层汉诺塔）；")]),n("p",[t._v("其次，将最大的1个圆环从x柱移到y柱；")]),n("p",[t._v("最后，将n-1个圆盘从z柱，经由x柱中转，移到y柱（解出n-1层汉诺塔）；")]),n("p",[t._v("将解出“n层汉诺塔”所需的最少移动次数表示为H(n)，那么有如下等式：")]),n("p",[t._v("H(n) =\n0，n为0的时候\nH(n-1) + 1 + H(n-1)，n>0时")]),n("p",[t._v("上述H(n)和H(n-1)的关系称为递推公式。")]),n("p",[t._v("所以5层汉诺塔的最少移动次数：")]),n("p",[t._v("H(5)=H(4) + 1 + H(4)=31\nH(4)=H(3) + 1 + H(3)=15\nH(3)=H(2) + 1 + H(2)=7\nH(2)=H(1) + 1 + H(1)=3\nH(1)=H(0) + 1 + H(0)=1\nH(0) = 0")]),n("p",[t._v("从下往上带入计算，即可求出5层汉诺塔的最少移动次数为31。")]),n("p",[t._v("这里使用JavaScript代码来演示n层汉诺塔的解法和最少移动次数：")]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n    函数参数依次为\n    n：汉诺塔的层数\n    x：起点柱\n    y：终点柱\n    z：中转柱\n*/")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" count "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("hanoi")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" z")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将n-1个圆环从x柱，经由y柱中转，移到z柱")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("hanoi")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" z"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将最大的1个圆环从x柱移到y柱")]),t._v("\n        console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("把当前")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("x"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("柱上最上面的圆环移动到")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("y"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("柱")]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        count"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将n-1个圆盘从z柱，经由x柱中转，移到y柱")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("hanoi")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" z"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("hanoi")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'B'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'C'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("最少移动次数为：")]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("count"),n("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n输出：\n把当前A柱上最上面的圆环移动到B柱\n把当前A柱上最上面的圆环移动到C柱\n把当前B柱上最上面的圆环移动到C柱\n把当前A柱上最上面的圆环移动到B柱\n把当前C柱上最上面的圆环移动到A柱\n把当前C柱上最上面的圆环移动到B柱\n把当前A柱上最上面的圆环移动到B柱\n最少移动次数为：7\n*/")]),t._v("\n")])])]),n("p",[t._v("有兴趣的可以对着这个步骤来移动汉诺塔，检验是否正确。")]),n("p",[t._v("上面找规律来解决的方式是我在知道答案后的马后炮行为，只用来帮助更好的理解和解决汉诺塔这个游戏，并不具有通用性。")]),n("p",[t._v("到这里就要有请另一个主角【递归】登场了，递归，就是自己调用自己。它通常用来把复杂的大问题层层转化为类似的小问题，先解决小问题再返回解决大问题的一种思想。")]),n("p",[t._v("递归包含递和归两个步骤，要使用递归来解决一个问题首先要先判断该问题是否能分解成有相同思路的子问题，代码层面来说，就是是否能调用同一个函数来解决；其次是是否有边界条件，即分解到某一个子问题后发现不能再分解了，否则一直下去没有尽头，那就不叫递归了，叫永递，即永远的递下去（什么乱七八糟的）。其中递归函数里怎么继续再调用自身通常是需要找到一个大问题和小问题之间的联系的，也就是上面提到的递推公式，这是用递归来解决问题最难的部分，编写代码往往是很简单的。")]),n("p",[t._v("但是不要怕，万事都有套路，解决递归问题的一般套路如下：")]),n("p",[t._v("1.先定义一个函数，明确这个函数要干什么，具体的函数内容可以先不写；")]),n("p",[t._v("2.寻找递归结束的条件，即当函数参数为什么时返回，不再继续调用自身，找到后在函数内写出来；")]),n("p",[t._v("3.最重要的一步，找到问题和子问题间的联系，即找到递推公式，对于函数来说，也就是函数参数要怎么缩小，在函数内用代码表示出来。")]),n("p",[t._v("搞定。")]),n("p",[t._v("理论是简单的，接下来实践一下。")]),n("p",[t._v("首先来看上一篇里提到的n的阶乘问题：n!=n"),n("em",[t._v("n-1")]),t._v("n-2....."),n("em",[t._v("2")]),t._v("1，很明显是符合递归特征的，比如5!=5"),n("em",[t._v("4!，4!=4")]),t._v("3!，所以一个大的阶层是可以分解成小的阶层来计算的，用上面的套路来用递归计算它。")]),n("p",[t._v("1.定义一个函数")]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 参数n为要计算几层阶层。")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("jc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("2.寻找递归结束条件")]),n("p",[t._v("通过上面的等式很明显知道n为1时就结束了，而1的阶层我们是知道的，为1。")]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("jc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("3.寻找递推公式")]),n("p",[t._v("上面也提过，5!=5"),n("em",[t._v("4!，4!=4")]),t._v("3!，抽象出来，即n!=n*(n-1)!，jc(n)是计算n的阶层，那么计算n-1的阶层为：jc(n-1)，这就是我们要的递推公式，用代码写出来。")]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("jc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("jc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("接下来再看一个斐波那契数列的问题，斐波那契数列是这样的一个数列：1、1、2、3、5、8、13、21、34....，求第n项的值是多少。")]),n("p",[t._v("继续按套路来：")]),n("p",[t._v("1.定义一个函数")]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 参数n为要计算第几项。")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fb")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("2.寻找递归结束条件")]),n("p",[t._v("观察上面的数列，好像当n为1或2时都可以作为结束条件，确定不了，那么不妨先跳到第三步。")]),n("p",[t._v("3.寻找递推公式")]),n("p",[t._v("仔细观察上面的数列，发现从第3项开始每项的值都为前两项的和，即fb(n)=fb(n-1)+fb(n-2)，这就是递推公式，根据这个递推公式发现，n如果小于2就要计算第0项和负的项了，显然是没有的，所以第二步的结束条件也就找到了，n小于等于2时就可以结束了。")]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fb")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("n")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fb")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("fb")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("最后来看一个排序的算法，快速排序，顾名思义，它很快，它为什么快呢，因为它的原理和二分法有点类似，不管什么排序，终归是要进行两两比较的，简单粗暴的方式就是每一个都和其他的进行比较，但是快速排序先根据一个中间数，根据比它大还是小来把整个数据分成两个部分，这样两个部分可以单独排序，最重要的是这两个部分里都只要内部进行比较就好了，不用再和另外一个部分进行比较，这样无疑就少了很多比较的过程，而分解成的两个部分又可以继续再分解成更小的部分，可以发现它是典型的递归结构，还是根据上面的套路步骤来：")]),n("p",[t._v("1.定义一个函数")]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 参数arr代表要进行排序的数字数组，如：[1,3,434,43,23,134,12,45]。")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("quickSort")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("2.寻找递归结束条件")]),n("p",[t._v("很明显，当只有一个数时是不用排序的。")]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("quickSort")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" arr\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("3.寻找递推公式")]),n("p",[t._v("因为首先是要找一个中间数，假设为n，那么最后排序完成的数组为quickSort(arr) = quickSort(比n小的数字组成的数组) 连接上n，再连接上比n大的数字组成的数组。翻译成代码如下：")]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("quickSort")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" arr\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" middleIndex "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("floor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" middle "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("splice")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("middleIndex"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" leftArr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" rightArr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" middle"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      leftArr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      rightArr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("quickSort")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("leftArr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("middle"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("quickSort")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rightArr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("以上的示例都比较简单，而且也都还有优化的空间，包括递归本身的优化，及快速排序的优化，有兴趣的可以继续深入了解，咱们下次再会。")]),n("p",[t._v("ps.汉诺塔的游戏开发教程已在路上，敬请期待。")]),n("p",[t._v("参考资料：")]),n("p",[t._v("1.《程序员的数学》第二版；")]),n("p",[t._v("2."),n("a",{attrs:{href:"https://www.zhihu.com/question/31412436",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.zhihu.com/question/31412436"),n("OutboundLink")],1),t._v("；")]),n("p",[t._v("3."),n("a",{attrs:{href:"https://baike.baidu.com/item/%E9%80%92%E5%BD%92/1740695?fr=aladdin",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://baike.baidu.com/item/%E9%80%92%E5%BD%92/1740695?fr=aladdin"),n("OutboundLink")],1),t._v("；")]),n("p",[t._v("4."),n("a",{attrs:{href:"https://baijiahao.baidu.com/s?id=1652935562400134309&wfr=spider&for=pc",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://baijiahao.baidu.com/s?id=1652935562400134309&wfr=spider&for=pc"),n("OutboundLink")],1),t._v("；")])])}),[],!1,null,null,null);s.default=p.exports}}]);